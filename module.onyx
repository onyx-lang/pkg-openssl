package openssl

use package core { cptr }

#if #defined((package runtime).Generated_Foreign_Info) {
    foreign_block :: __foreign_block
} else {
    #library "onyx_openssl"
}

#local __foreign_block :: #foreign "onyx_openssl" {
    // Crypto
    d2i_X509 :: (x: ^X509, ppin: ^cptr(u8), length: u64) -> X509 ---
    X509_STORE_add_cert :: (ctx: X509_STORE, x: X509) -> i32 ---
    X509_free :: (x: X509) -> void ---

    // SSL
    OPENSSL_version_major :: () -> u32 ---
    OPENSSL_version_minor :: () -> u32 ---
    OPENSSL_version_patch :: () -> u32 ---

    OPENSSL_init_ssl :: (opts: u32, settings: OPENSSL_INIT_SETTINGS) -> i32 ---

    TLS_client_method :: () -> SSL_METHOD ---

    SSL_CTX_new :: (method: SSL_METHOD) -> SSL_CTX ---
    SSL_CTX_free :: (ctx: SSL_CTX) -> void ---
    SSL_CTX_set_verify :: (ctx: SSL_CTX, mode: i32, callback: rawptr) -> void ---
    SSL_CTX_set_verify_depth :: (ctx: SSL_CTX, depth: i32) -> void ---
    SSL_CTX_set_default_verify_paths :: (ctx: SSL_CTX) -> i32 ---
    SSL_CTX_get_timeout :: (ctx: SSL_CTX) -> i64 ---
    SSL_CTX_set_timeout :: (ctx: SSL_CTX, t: i64) -> i64 ---
    SSL_CTX_get_options :: (ctx: SSL_CTX) -> u32 ---
    SSL_CTX_set_options :: (ctx: SSL_CTX, options: u32) -> u32 ---
    SSL_CTX_get_cert_store :: (ctx: SSL_CTX) -> X509_STORE ---

    BIO_new_socket :: (sock: i32, close_flag: i32) -> SSL_BIO ---

    SSL_new :: (ctx: SSL_CTX) -> SSL ---
    SSL_free :: (ssl: SSL) -> void ---
    SSL_set_bio :: (ssl: SSL, rbio: SSL_BIO, wbio: SSL_BIO) -> void ---
    SSL_ctrl :: (ssl: SSL, cmd: i32, larg: i64, parg: rawptr) -> i64 ---
    SSL_connect :: (ssl: SSL) -> i32 ---
    SSL_shutdown :: (ssl: SSL) -> i32 ---
    SSL_get_error :: (ssl: SSL, ret: i32) -> i32 ---
    SSL_read :: (ssl: SSL, buf: rawptr, num: i32) -> i32 ---
    SSL_write :: (ssl: SSL, buf: rawptr, num: i32) -> i32 ---
    SSL_pending :: (ssl: SSL) -> i32 ---
}


SSL_METHOD :: #distinct u64
SSL_CTX :: #distinct u64
SSL_BIO :: #distinct u64
SSL :: #distinct u64
X509_STORE_CTX :: #distinct u64
X509_STORE :: #distinct u64
X509 :: #distinct u64

OPENSSL_INIT_SETTINGS :: #distinct u64

OPENSSL_INIT_NO_LOAD_SSL_STRINGS    :: 0x00100000
OPENSSL_INIT_LOAD_SSL_STRINGS       :: 0x00200000
OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS :: 0x00000001
OPENSSL_INIT_LOAD_CRYPTO_STRINGS    :: 0x00000002

SSL_VERIFY_NONE :: 0
SSL_VERIFY_PEER :: 1
SSL_VERIFY_FAIL_IF_NO_PEER_CERT :: 2
SSL_VERIFY_CLIENT_ONCE :: 4
SSL_VERIFY_POST_HANDSHAKE :: 8

SSL_OP_NO_COMPRESSION :: 0x10000
SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION :: 0x20000

SSL_ERROR_NONE :: 0
SSL_ERROR_SSL :: 1
SSL_ERROR_WANT_READ :: 2
SSL_ERROR_WANT_WRITE :: 3
SSL_ERROR_WANT_X509_LOOKUP :: 4
SSL_ERROR_SYSCALL :: 5
SSL_ERROR_ZERO_RETURN :: 6
SSL_ERROR_WANT_CONNECT :: 7
SSL_ERROR_WANT_ACCEPT :: 8
SSL_ERROR_WANT_ASYNC :: 9
SSL_ERROR_WANT_ASYNC_JOB :: 10
SSL_ERROR_WANT_CLIENT_HELLO_CB :: 11
SSL_ERROR_WANT_RETRY_VERIFY :: 12

TLSEXT_NAMETYPE_host_name :: 0
SSL_CTRL_SET_TLSEXT_HOSTNAME :: 55

BIO_NOCLOSE :: 0
BIO_CLOSE   :: 1
